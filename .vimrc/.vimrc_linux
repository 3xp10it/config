"下面这段是vundle要求的,加到vimrc的开头
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'haya14busa/incsearch.vim'"安装incsearch插件
Plugin 'haya14busa/incsearch-fuzzy.vim'"安装incsearch-fuzzy插件
Plugin 'easymotion/vim-easymotion'"安装easymotion插件
Plugin 'haya14busa/incsearch-easymotion.vim'"<space+/>,<z+/>
Plugin 'Chiel92/vim-autoformat'"autoformat代码自动对齐插件<f3>
Plugin 'jiangmiao/auto-pairs'"auto-pairs括号自动配对插件
Plugin 'Valloric/YouCompleteMe'
Plugin 'Yggdroot/indentLine'"indentLine代码对齐线插件
Plugin 'vimcn/vimcdoc'"vim中文文档
Plugin 'ctrlpvim/ctrlp.vim'"ctrlp快速打开文件插件,<c-p>
Plugin 'flazz/vim-colorschemes'"配色插件
Plugin 'felixhummel/setcolors.vim'"快速切换配色<f8>
Plugin 'takac/vim-hardtime'"强制改变jjjjjjjjjjkkkkkkkkkkkllllllll的坏习惯

"下面两个插件用来美化状态栏
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"下面2个用来安装fzf插件
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'

Plugin 'mbbill/undotree'"undotree插件
Plugin 'luochen1990/rainbow'"彩虹括号插件
Plugin 'junegunn/vim-easy-align'"快速编辑对齐插件(非代码对齐)
Plugin 'mileszs/ack.vim'"ack正则工具,要记得安装https://github.com/ggreer/the_silver_searcher
Plugin 'ascenator/L9', {'name': 'newL9'}" Install L9 and avoid a Naming conflict if you've already installed a,different version somewhere else.
Plugin 'iamcco/markdown-preview.vim'"markdown实时预览
Plugin 'w0rp/ale'"静态检查语法
Plugin 'junegunn/limelight.vim'"高亮光标所在区域
Plugin 'tpope/vim-surround'"编辑成对符号插件vim-surround

"安装markdown相关插件
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'reedes/vim-pencil'

call vundle#end()            " required

"下面这行要注意,有可能以后要改
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use: filetype plugin on
let mapleader=','"设置leader键为,
set number"显示行号
syntax on"自动语法高亮,语法检验
set autoindent"自动缩进
set tabstop=4"tab键占4个字符
set ignorecase smartcase"设置查找时忽略大小写,但是如果输入的查找内容中有大写则变成大小时敏感

" for wrap is on,可用vim-pencil代替
"noremap  <buffer> <silent> k gk
"noremap  <buffer> <silent> j gj
"noremap  <buffer> <silent> 0 g0
"noremap  <buffer> <silent> $ g$

"下面是插入模式的3个字符内移动的快捷键,结合vim-hardtime在vim-hardtime中设置去除Left,Down,Up,Right的禁用
"超过当前光标所在位置的移动用f+j+s+字符+hint,或者f+j+w|b的方法移动(f+j为esc的map)
"需要先查看是否有插件与<c-h>冲突,检查方法为:verbose imap <c-h>,发现auto-pairs插件有关于<c-h>的设置,注释掉就可以
inoremap <c-h> <left>
" for wrap is on
inoremap <c-j> <esc>gjli
" for wrap is on
inoremap <c-k> <esc>gkli
inoremap <c-l> <right>
cnoremap <c-h> <left>
cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <c-l> <right>

inoremap <c-b> <esc>lbi
inoremap <c-w> <esc>lwi
inoremap <c-a> <esc>I"ctrl+a在插入模式下跳到当前行开关并进入插入模式,<c-0>无效,于是用<c-a>
inoremap <c-e> <esc>A"ctrl+e在插入模式下跳到当前行末尾并进入插入模式

"方便操作
map ; :
map mm ZZ
noremap ' `
map sy "+y
map sp "+p
nnoremap <enter> i<enter><esc>"在光标处换行,不用再切换到insert模式再enter

"md文件中文符号换成英文
au BufRead *.md call Biaodian()
map <F2> :call Biaodian() <CR>
function Biaodian()
    silent! %s/“/"/g
    silent! %s/”/"/g
    silent! %s/，/,/g
    silent! %s/。/./g
    silent! %s/？/?/g
    silent! %s/〈/</g
    silent! %s/〉/>/g
    silent! %s/（/(/g
    silent! %s/）/)/g
    silent! %s/：/:/g
    silent! %s/；/;/g
    silent! %s/‘/'/g
    silent! %s/‘/'/g
    silent! %s/！/!/g
    endfunction

set formatoptions+=mM"textwidth用于中文换行
set shiftwidth=4"设置缩进的空格数

"设置tab键为4个空格
set ts=4
set expandtab

"markdown setting
au BufNewFile,BufReadPost *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown
au BufNewFile,BufReadPost,BufWrite *.{md,mdown,mkd,mkdn,markdown,mdwn} syntax match Comment /\%^---\_.\{-}---$/
au FileType markdown setlocal linebreak    " Avoid wrap breaking words
au FileType markdown setlocal nolist       " Make sure linebreak work as expected
au FileType markdown setlocal textwidth=0  " Remove text width limit

"下面4个插件最后浓缩成的两个典型使用方法:
"space+/:fuzz search+easymotion功能
"z/:fuzz search功能
"
"incsearch插件设置
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
function! s:noregexp(pattern) abort
    return '\V' . escape(a:pattern, '\')
endfunction
function! s:config() abort
    return {'converters': [function('s:noregexp')]}
endfunction
noremap <silent><expr> z/ incsearch#go(<SID>config())

"incsearch-fuzzy插件设置
"fuzzy
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)
"fuzzyspell
map z/ <Plug>(incsearch-fuzzyspell-/)
map z? <Plug>(incsearch-fuzzyspell-?)
map zg/ <Plug>(incsearch-fuzzyspell-stay)
"Use both fuzzy & fuzzyspell feature
function! s:config_fuzzyall(...) abort
    return extend(copy({
                \   'converters': [
                \     incsearch#config#fuzzy#converter(),
                \     incsearch#config#fuzzyspell#converter()
                \   ],
                \ }), get(a:, 1, {}))
endfunction
noremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> z? incsearch#go(<SID>config_fuzzyall({'command': '?'}))
noremap <silent><expr> zg? incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))

"incsearch-easymotion插件的设置
"""incsearch.vim x fuzzy x vim-easymotion
function! s:config_easyfuzzymotion(...) abort
    return extend(copy({
                \   'converters': [incsearch#config#fuzzy#converter()],
                \   'modules': [incsearch#config#easymotion#module()],
                \   'keymap': {"\<CR>": '<Over>(easymotion)'},
                \   'is_expr': 0,
                \   'is_stay': 1
                \ }), get(a:, 1, {}))
endfunction
noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())

"下面是easymotion插件的相关设置
"下面这句暂时不确定用意
let g:EasyMotion_do_mapping = 0 " Disable default mappings
"三键到任意地方
nmap s <Plug>(easymotion-overwin-f)
"四键到任意地方
"nmap s <Plug>(easymotion-overwin-f2)
"设置大小写不敏感
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
"move to line
map <Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader>l <Plug>(easymotion-overwin-line)

"下面设置fuzzsearch,这个有点叼,结合incsearch,incsearch-fuzzy,easymotion,incsearch-easymotion四个插件
" You can use other keymappings like <C-l> instead of <CR> if you want to
" use these mappings as default search and somtimes want to move cursor with
" EasyMotion.
function! s:incsearch_config(...) abort
    return incsearch#util#deepextend(deepcopy({
                \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
                \   'keymap': {
                \     "\<CR>": '<Over>(easymotion)'
                \   },
                \   'is_expr': 0
                \ }), get(a:, 1, {}))
endfunction
noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

noremap <F3> :Autoformat<CR>"代码对齐插件相关设置

"YouCompleteMe相关设置
set runtimepath+=~/.vim/bundle/YouCompleteMe
autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口"
let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
"let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" |            " 回车即选中当前项
nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|     " 跳转到定义处
"let g:ycm_min_num_of_chars_for_completion=2                 " 从第2个键入字符就开始罗列匹配项

"下面开启打开文件时自动跳转到上次编辑的地方,vim在/etc/vim/vimrc文件中默认设置关闭
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"vim-hardtime插件的设置
let g:hardtime_default_on = 1
let g:hardtime_maxcount = 3
let g:list_of_normal_keys = ["h", "j", "k", "l", "-", "+"]
let g:list_of_visual_keys = ["h", "j", "k", "l", "-", "+"]
let g:list_of_insert_keys = []

"每行超过80字符长度后用不同颜色显示
"augroup FileType python vimrc_autocmds
"    autocmd CursorHold * highlight OverLength ctermbg=darkgrey guibg=#592929
"    autocmd CursorHold * match OverLength /\%80v.*/
"augroup END

"自动保存命令
set updatetime=200
au CursorHold * silent! update

"下面是markdown预览插件的相关设置,如果f5失效则先按f6再按f5
nmap <silent> <F5> <Plug>MarkdownPreview        " 普通模式
imap <silent> <F5> <Plug>MarkdownPreview        " 插入模式
nmap <silent> <F6> <Plug>StopMarkdownPreview    " 普通模式
imap <silent> <F6> <Plug>StopMarkdownPreview    " 插入模式

let g:airline_theme='bubblegum'"设置airline-theme

"下面设置w0rp/ale
let g:airline#extensions#ale#enabled = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

"下面设置undotree
if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

let g:rainbow_active = 1 "下面设置彩虹括号插件

"下面设置ack.vim插件使用ag (The Silver Searcher) 
if executable('ag') 
    let g:ackprg = 'ag --nogroup --nocolor --column'
endif

"下面设置fzf.vim
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

let g:vim_markdown_folding_disabled = 1"'plasticboy/vim-markdown'插件的设置

"vim-pencil插件的设置
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init({'wrap': 'hard'})
augroup END
